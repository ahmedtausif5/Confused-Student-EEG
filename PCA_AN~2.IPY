{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.3"
    },
    "colab": {
      "name": "PCA and LDA for Dataset 2.ipynb",
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "tcv3BPmMSYhT",
        "outputId": "6b74aaee-30e5-484e-f104-d565eddfd34e"
      },
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv('/content/sample_data/OneHotDataset.csv')\n",
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CSE_110</th>\n",
              "      <th>CSE_111</th>\n",
              "      <th>CSE_230</th>\n",
              "      <th>CSE_260</th>\n",
              "      <th>CSE_330</th>\n",
              "      <th>CSE_340</th>\n",
              "      <th>CSE_420</th>\n",
              "      <th>CSE_421</th>\n",
              "      <th>CSE_422</th>\n",
              "      <th>CSE_427</th>\n",
              "      <th>Attention</th>\n",
              "      <th>Mediation</th>\n",
              "      <th>Raw</th>\n",
              "      <th>Delta</th>\n",
              "      <th>Theta</th>\n",
              "      <th>Alpha1</th>\n",
              "      <th>Alpha2</th>\n",
              "      <th>Beta1</th>\n",
              "      <th>Beta2</th>\n",
              "      <th>Gamma1</th>\n",
              "      <th>Gamma2</th>\n",
              "      <th>user-definedlabeln</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>56</td>\n",
              "      <td>43</td>\n",
              "      <td>278</td>\n",
              "      <td>301963</td>\n",
              "      <td>90612</td>\n",
              "      <td>33735</td>\n",
              "      <td>23991</td>\n",
              "      <td>27946</td>\n",
              "      <td>45097</td>\n",
              "      <td>33228</td>\n",
              "      <td>8293</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>-50</td>\n",
              "      <td>73787</td>\n",
              "      <td>28083</td>\n",
              "      <td>1439</td>\n",
              "      <td>2240</td>\n",
              "      <td>2746</td>\n",
              "      <td>3687</td>\n",
              "      <td>5293</td>\n",
              "      <td>2740</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>47</td>\n",
              "      <td>48</td>\n",
              "      <td>101</td>\n",
              "      <td>758353</td>\n",
              "      <td>383745</td>\n",
              "      <td>201999</td>\n",
              "      <td>62107</td>\n",
              "      <td>36293</td>\n",
              "      <td>130536</td>\n",
              "      <td>57243</td>\n",
              "      <td>25354</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>47</td>\n",
              "      <td>57</td>\n",
              "      <td>-5</td>\n",
              "      <td>2012240</td>\n",
              "      <td>129350</td>\n",
              "      <td>61236</td>\n",
              "      <td>17084</td>\n",
              "      <td>11488</td>\n",
              "      <td>62462</td>\n",
              "      <td>49960</td>\n",
              "      <td>33932</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>44</td>\n",
              "      <td>53</td>\n",
              "      <td>-8</td>\n",
              "      <td>1005145</td>\n",
              "      <td>354328</td>\n",
              "      <td>37102</td>\n",
              "      <td>88881</td>\n",
              "      <td>45307</td>\n",
              "      <td>99603</td>\n",
              "      <td>44790</td>\n",
              "      <td>29749</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   CSE_110  CSE_111  CSE_230  ...  Gamma1  Gamma2  user-definedlabeln\n",
              "0        0        1        0  ...   33228    8293                   0\n",
              "1        0        1        0  ...    5293    2740                   0\n",
              "2        0        1        0  ...   57243   25354                   0\n",
              "3        0        1        0  ...   49960   33932                   0\n",
              "4        0        1        0  ...   44790   29749                   0\n",
              "\n",
              "[5 rows x 22 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l-r9f57DSYha",
        "outputId": "af4ec904-a5b2-4486-c801-38b91ec0ddbe"
      },
      "source": [
        "df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(12811, 22)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m9lxuWv5SYha"
      },
      "source": [
        "X = df.drop('user-definedlabeln',axis=1).values\n",
        "y = df['user-definedlabeln'].values"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nD64ObDuSYhb"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "x_train, x_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.25, random_state=42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nroRIwe1D4fS",
        "outputId": "011b2b93-8d8e-40c5-f74f-c4723ecb873f"
      },
      "source": [
        "x_train.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(9608, 21)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a3KXDnrED7Ml",
        "outputId": "5b6f81c0-89fa-4326-99a7-0a3b9d5f1250"
      },
      "source": [
        "x_test.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3203, 21)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "id": "39WXzWQGSYhb",
        "outputId": "7d2b49d5-d91b-40ed-f195-139d5aab55b2"
      },
      "source": [
        "import numpy as np\n",
        "from sklearn.decomposition import PCA\n",
        "pca = PCA().fit(X_scaled)\n",
        "\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams[\"figure.figsize\"] = (12,6)\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "xi = np.arange(1, 22, step=1)\n",
        "yi = np.cumsum(pca.explained_variance_ratio_)\n",
        "\n",
        "plt.ylim(0.0,1.1)\n",
        "plt.plot(xi, yi, marker='o', linestyle='--', color='b')\n",
        "\n",
        "plt.xlabel('Number of Components')\n",
        "plt.xticks(np.arange(0, 22, step=1)) #change from 0-based array index to 1-based human-readable label\n",
        "plt.ylabel('Cumulative variance (%)')\n",
        "plt.title('The number of components needed to explain variance for dataset 2')\n",
        "\n",
        "plt.axhline(y=0.8, color='r', linestyle='-')\n",
        "plt.text(0.7, 0.75, '80% cut-off threshold', color = 'red', fontsize=16)\n",
        "\n",
        "ax.grid(axis='x')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VwMDw4oGoec4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "0895746b-cef8-49ef-94e7-4bbf4c544bc7"
      },
      "source": [
        "features = np.arange(1, 22, step=1)\r\n",
        "plt.bar(features, pca.explained_variance_ratio_)\r\n",
        "plt.xlabel('Number of Components')\r\n",
        "plt.ylabel('Variance ratio')\r\n",
        "plt.xticks(np.arange(0, 22, step=1))\r\n",
        "plt.title('Contribution of the components to the variance for dataset 2')\r\n",
        "plt.show()\r\n",
        "print(pca.explained_variance_ratio_.cumsum())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "[0.21816941 0.2976334  0.36058347 0.41448602 0.46798594 0.5211027\n",
            " 0.57407006 0.62694616 0.6796986  0.73221551 0.78414009 0.82921461\n",
            " 0.87040483 0.89980679 0.9220587  0.94334903 0.96190512 0.97865239\n",
            " 0.99200255 1.         1.        ]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b4MKasjESYhb"
      },
      "source": [
        "model_pca = PCA(n_components=11)\n",
        "\n",
        "new_train = model_pca.fit_transform(x_train)\n",
        "new_test  = model_pca.transform(x_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WggPxlGpSYhc"
      },
      "source": [
        "Without PCA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AMq0dT6GSYhc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "67dc886c-8ea4-4117-8b63-0ac280b9ab42"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "clf=RandomForestClassifier(n_estimators=93, random_state=143)\n",
        "clf.fit(x_train,y_train)\n",
        "y_pred=clf.predict(x_test)\n",
        "from sklearn import metrics\n",
        "print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n",
        "print(\"Precision:\",metrics.precision_score(y_test, y_pred))\n",
        "print(\"Recall:\",metrics.recall_score(y_test, y_pred))\n",
        "print(\"F1 Score:\",metrics.f1_score(y_test, y_pred))\n",
        "\n",
        "from sklearn.metrics import recall_score\n",
        "tpr = recall_score(y_test, y_pred) \n",
        "tnr = recall_score(y_test, y_pred, pos_label = 0) \n",
        "fpr = 1 - tnr\n",
        "fnr = 1 - tpr\n",
        "print(\"False Positive Rate:\",fpr)\n",
        "print(\"False Negative Rate:\",fnr)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy: 0.8020605682172963\n",
            "Precision: 0.7740303541315345\n",
            "Recall: 0.855811062771908\n",
            "F1 Score: 0.8128689492325856\n",
            "False Positive Rate: 0.2521957340025094\n",
            "False Negative Rate: 0.144188937228092\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d1pV8FwrSYhc"
      },
      "source": [
        "With PCA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_PR-CSlESYhc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "44d89a13-2961-4444-c82f-8ea0f8280146"
      },
      "source": [
        "clf2=RandomForestClassifier(n_estimators=93, random_state=143)\n",
        "clf2.fit(new_train,y_train)\n",
        "y_pred=clf2.predict(new_test)\n",
        "print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n",
        "print(\"Precision:\",metrics.precision_score(y_test, y_pred))\n",
        "print(\"Recall:\",metrics.recall_score(y_test, y_pred))\n",
        "print(\"F1 Score:\",metrics.f1_score(y_test, y_pred))\n",
        "\n",
        "from sklearn.metrics import recall_score\n",
        "tpr = recall_score(y_test, y_pred) \n",
        "tnr = recall_score(y_test, y_pred, pos_label = 0) \n",
        "fpr = 1 - tnr\n",
        "fnr = 1 - tpr\n",
        "print(\"False Positive Rate:\",fpr)\n",
        "print(\"False Negative Rate:\",fnr)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy: 0.7664689353730877\n",
            "Precision: 0.7489878542510121\n",
            "Recall: 0.8048477315102548\n",
            "F1 Score: 0.7759137207908927\n",
            "False Positive Rate: 0.2722710163111669\n",
            "False Negative Rate: 0.1951522684897452\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C9Xk5ULFSYhd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0ed4c6ca-7fa5-44ad-dca5-7487b05026d8"
      },
      "source": [
        "df.isin([0]).sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CSE_110               11530\n",
              "CSE_111               11399\n",
              "CSE_230               11630\n",
              "CSE_260               11634\n",
              "CSE_330               11537\n",
              "CSE_340               11605\n",
              "CSE_420               11581\n",
              "CSE_421               11455\n",
              "CSE_422               11531\n",
              "CSE_427               11397\n",
              "Attention              1423\n",
              "Mediation              1423\n",
              "Raw                      57\n",
              "Delta                     0\n",
              "Theta                     0\n",
              "Alpha1                    0\n",
              "Alpha2                    0\n",
              "Beta1                     0\n",
              "Beta2                     0\n",
              "Gamma1                    0\n",
              "Gamma2                    0\n",
              "user-definedlabeln     6244\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nNNEv7SC1QiM"
      },
      "source": [
        "LDA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SrDaMBQ6SYhd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "42bf8cde-165c-463a-ef50-e993c088061b"
      },
      "source": [
        "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
        "lda = LinearDiscriminantAnalysis(n_components=None)\n",
        "X_lda = lda.fit(X, y)\n",
        "lda_var_ratios = lda.explained_variance_ratio_\n",
        "lda_var_ratios"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1.])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8jtq9A9P1NcR"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qMDN9w4jSYhd"
      },
      "source": [
        "# Create a function\n",
        "def select_n_components(var_ratio, goal_var: float) -> int:\n",
        "    # Set initial variance explained so far\n",
        "    total_variance = 0.0\n",
        "    \n",
        "    # Set initial number of features\n",
        "    n_components = 0\n",
        "    \n",
        "    # For the explained variance of each feature:\n",
        "    for explained_variance in var_ratio:\n",
        "        \n",
        "        # Add the explained variance to the total\n",
        "        total_variance += explained_variance\n",
        "        \n",
        "        # Add one to the number of components\n",
        "        n_components += 1\n",
        "        \n",
        "        # If we reach our goal level of explained variance\n",
        "        if total_variance >= goal_var:\n",
        "            # End the loop\n",
        "            break\n",
        "            \n",
        "    # Return the number of components\n",
        "    return n_components"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WlmWajbPSYhd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6c6d8317-2855-42c7-e3f7-193118e81d25"
      },
      "source": [
        "select_n_components(lda_var_ratios, 0.6)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ETN5nvkHSYhe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "717a93e3-604a-4af4-d484-bf208d24293d"
      },
      "source": [
        "linearda = LinearDiscriminantAnalysis(n_components=1)\n",
        "#X_train = lda.fit_transform(X_train, y_train)\n",
        "#X_test = lda.transform(X_test)\n",
        "x_train_lda = linearda.fit_transform(x_train, y_train)\n",
        "x_test_lda = linearda.transform(x_test)\n",
        "clf3=RandomForestClassifier(n_estimators=93)\n",
        "clf3.fit(x_train_lda,y_train)\n",
        "y_pred=clf3.predict(x_test_lda)\n",
        "from sklearn import metrics\n",
        "print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n",
        "print(\"Precision:\",metrics.precision_score(y_test, y_pred))\n",
        "print(\"Recall:\",metrics.recall_score(y_test, y_pred))\n",
        "print(\"F1 Score:\",metrics.f1_score(y_test, y_pred))\n",
        "\n",
        "from sklearn.metrics import recall_score\n",
        "tpr = recall_score(y_test, y_pred) \n",
        "tnr = recall_score(y_test, y_pred, pos_label = 0) \n",
        "fpr = 1 - tnr\n",
        "fnr = 1 - tpr\n",
        "print(\"False Positive Rate:\",fpr)\n",
        "print(\"False Negative Rate:\",fnr)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy: 0.5991258195441773\n",
            "Precision: 0.5943122460824144\n",
            "Recall: 0.6364201367308887\n",
            "F1 Score: 0.6146458583433374\n",
            "False Positive Rate: 0.4385194479297365\n",
            "False Negative Rate: 0.3635798632691113\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d7BGmKSdSYhe"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}