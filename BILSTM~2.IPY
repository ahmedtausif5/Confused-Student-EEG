{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "BiLSTM for dataset 1.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ps_VWRcLQxJ7"
      },
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import LSTM\n",
        "from keras.layers import Bidirectional\n",
        "from sklearn.model_selection import train_test_split\n",
        "import numpy as np \n",
        "import pandas as pd\n",
        "from keras.callbacks import EarlyStopping\n",
        "from sklearn.preprocessing import PowerTransformer\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import roc_curve\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import roc_auc_score"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gPyYKTafQ7yD"
      },
      "source": [
        "df = pd.read_csv('/content/sample_data/EEG_data.csv')\n",
        "# df=df.drop(df[df['SubjectID'] == 6].index)\n",
        "df.drop(['SubjectID', 'VideoID', 'predefinedlabel'], axis=1, inplace=True)\n",
        "X=df.drop('user-definedlabeln', axis=1).values\n",
        "y=df['user-definedlabeln'].values\n",
        "\n",
        "pt = PowerTransformer()\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n",
        "X_train = pt.fit_transform(X_train)\n",
        "X_test = pt.transform(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KQuGG3X_Q9T7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "70c9dfcb-0152-43f9-d583-62706720f43b"
      },
      "source": [
        "X_train.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(9608, 11)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3XFA63_aQ-hN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f41019b7-47c8-4c4b-a16c-b7b73cca6875"
      },
      "source": [
        "X_test.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3203, 11)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CtXDH6c5Q_mp"
      },
      "source": [
        "X_train = X_train.reshape(-1, 1, 11)\n",
        "X_test  = X_test.reshape(-1, 1, 11)\n",
        "y_train = y_train.reshape(-1, 1, 1)\n",
        "y_test = y_test.reshape(-1, 1, 1)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hf2D0e3URA3O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "227215d4-5fbf-4a8e-cac6-e29ecc54d460"
      },
      "source": [
        "model = Sequential()\n",
        "model.add(Bidirectional(LSTM(50, return_sequences=True, activation='tanh'), input_shape=(9608, 11)))\n",
        "model.add(Dense(1, activation='sigmoid'))\n",
        "model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics=['accuracy'])\n",
        "model.summary()\n",
        "early_stopping_monitor = EarlyStopping(patience=5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "bidirectional (Bidirectional (None, 9608, 100)         24800     \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 9608, 1)           101       \n",
            "=================================================================\n",
            "Total params: 24,901\n",
            "Trainable params: 24,901\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JgeRYQqNRDe_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d59d27c4-2202-4969-915e-560654e7ea40"
      },
      "source": [
        "history = model.fit(X_train, y_train, epochs=100, verbose=True, validation_split=0.3, callbacks=[early_stopping_monitor], batch_size=20)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 9608, 11) for input KerasTensor(type_spec=TensorSpec(shape=(None, 9608, 11), dtype=tf.float32, name='bidirectional_input'), name='bidirectional_input', description=\"created by layer 'bidirectional_input'\"), but it was called on an input with incompatible shape (None, 1, 11).\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 9608, 11) for input KerasTensor(type_spec=TensorSpec(shape=(None, 9608, 11), dtype=tf.float32, name='bidirectional_input'), name='bidirectional_input', description=\"created by layer 'bidirectional_input'\"), but it was called on an input with incompatible shape (None, 1, 11).\n",
            "325/337 [===========================>..] - ETA: 0s - loss: 0.6747 - accuracy: 0.5904WARNING:tensorflow:Model was constructed with shape (None, 9608, 11) for input KerasTensor(type_spec=TensorSpec(shape=(None, 9608, 11), dtype=tf.float32, name='bidirectional_input'), name='bidirectional_input', description=\"created by layer 'bidirectional_input'\"), but it was called on an input with incompatible shape (None, 1, 11).\n",
            "337/337 [==============================] - 6s 7ms/step - loss: 0.6745 - accuracy: 0.5905 - val_loss: 0.6630 - val_accuracy: 0.6028\n",
            "Epoch 2/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6581 - accuracy: 0.6194 - val_loss: 0.6556 - val_accuracy: 0.6243\n",
            "Epoch 3/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6487 - accuracy: 0.6390 - val_loss: 0.6542 - val_accuracy: 0.6139\n",
            "Epoch 4/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6550 - accuracy: 0.6149 - val_loss: 0.6516 - val_accuracy: 0.6181\n",
            "Epoch 5/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6512 - accuracy: 0.6162 - val_loss: 0.6502 - val_accuracy: 0.6243\n",
            "Epoch 6/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6502 - accuracy: 0.6207 - val_loss: 0.6513 - val_accuracy: 0.6160\n",
            "Epoch 7/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6472 - accuracy: 0.6223 - val_loss: 0.6478 - val_accuracy: 0.6205\n",
            "Epoch 8/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6399 - accuracy: 0.6285 - val_loss: 0.6477 - val_accuracy: 0.6216\n",
            "Epoch 9/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6416 - accuracy: 0.6292 - val_loss: 0.6478 - val_accuracy: 0.6247\n",
            "Epoch 10/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6395 - accuracy: 0.6324 - val_loss: 0.6456 - val_accuracy: 0.6289\n",
            "Epoch 11/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6407 - accuracy: 0.6321 - val_loss: 0.6459 - val_accuracy: 0.6257\n",
            "Epoch 12/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6421 - accuracy: 0.6214 - val_loss: 0.6463 - val_accuracy: 0.6327\n",
            "Epoch 13/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6322 - accuracy: 0.6416 - val_loss: 0.6449 - val_accuracy: 0.6278\n",
            "Epoch 14/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6332 - accuracy: 0.6362 - val_loss: 0.6462 - val_accuracy: 0.6219\n",
            "Epoch 15/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6365 - accuracy: 0.6382 - val_loss: 0.6437 - val_accuracy: 0.6243\n",
            "Epoch 16/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6326 - accuracy: 0.6382 - val_loss: 0.6464 - val_accuracy: 0.6285\n",
            "Epoch 17/100\n",
            "337/337 [==============================] - 1s 4ms/step - loss: 0.6330 - accuracy: 0.6409 - val_loss: 0.6443 - val_accuracy: 0.6358\n",
            "Epoch 18/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6317 - accuracy: 0.6378 - val_loss: 0.6429 - val_accuracy: 0.6289\n",
            "Epoch 19/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6350 - accuracy: 0.6391 - val_loss: 0.6423 - val_accuracy: 0.6306\n",
            "Epoch 20/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6297 - accuracy: 0.6347 - val_loss: 0.6436 - val_accuracy: 0.6341\n",
            "Epoch 21/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6267 - accuracy: 0.6433 - val_loss: 0.6426 - val_accuracy: 0.6341\n",
            "Epoch 22/100\n",
            "337/337 [==============================] - 1s 4ms/step - loss: 0.6302 - accuracy: 0.6375 - val_loss: 0.6422 - val_accuracy: 0.6393\n",
            "Epoch 23/100\n",
            "337/337 [==============================] - 1s 4ms/step - loss: 0.6200 - accuracy: 0.6549 - val_loss: 0.6436 - val_accuracy: 0.6341\n",
            "Epoch 24/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6188 - accuracy: 0.6510 - val_loss: 0.6423 - val_accuracy: 0.6351\n",
            "Epoch 25/100\n",
            "337/337 [==============================] - 1s 4ms/step - loss: 0.6283 - accuracy: 0.6494 - val_loss: 0.6419 - val_accuracy: 0.6348\n",
            "Epoch 26/100\n",
            "337/337 [==============================] - 1s 4ms/step - loss: 0.6197 - accuracy: 0.6536 - val_loss: 0.6414 - val_accuracy: 0.6341\n",
            "Epoch 27/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6237 - accuracy: 0.6469 - val_loss: 0.6438 - val_accuracy: 0.6296\n",
            "Epoch 28/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6237 - accuracy: 0.6402 - val_loss: 0.6422 - val_accuracy: 0.6410\n",
            "Epoch 29/100\n",
            "337/337 [==============================] - 1s 4ms/step - loss: 0.6140 - accuracy: 0.6592 - val_loss: 0.6411 - val_accuracy: 0.6375\n",
            "Epoch 30/100\n",
            "337/337 [==============================] - 1s 4ms/step - loss: 0.6189 - accuracy: 0.6527 - val_loss: 0.6417 - val_accuracy: 0.6358\n",
            "Epoch 31/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6135 - accuracy: 0.6566 - val_loss: 0.6417 - val_accuracy: 0.6379\n",
            "Epoch 32/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6160 - accuracy: 0.6532 - val_loss: 0.6414 - val_accuracy: 0.6400\n",
            "Epoch 33/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6150 - accuracy: 0.6559 - val_loss: 0.6418 - val_accuracy: 0.6420\n",
            "Epoch 34/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.6160 - accuracy: 0.6569 - val_loss: 0.6414 - val_accuracy: 0.6410\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_Cbq36r2RH1p",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 275
        },
        "outputId": "116b70c5-0022-4db5-c059-ba57182e9d67"
      },
      "source": [
        "accuracy = model.evaluate(X_test, y_test)[1]\n",
        "print('Accuracy:', accuracy)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "y_pred = y_pred.flatten()\n",
        "y_test = y_test.flatten()\n",
        "\n",
        "fpr, tpr, thresholds = roc_curve(y_test, y_pred)\n",
        "\n",
        "# Plot ROC curve\n",
        "plt.plot([0, 1], [0, 1], 'k--')\n",
        "plt.plot(fpr, tpr)\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('ROC Curve')\n",
        "plt.show()\n",
        "\n",
        "print(\"AUC: {}\".format(roc_auc_score(y_test, y_pred)))\n",
        "\n",
        "y_pred = y_pred.round()\n",
        "print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n",
        "print(\"Precision:\",metrics.precision_score(y_test, y_pred))\n",
        "print(\"Recall:\",metrics.recall_score(y_test, y_pred))\n",
        "print(\"F1 Score:\",metrics.f1_score(y_test, y_pred))\n",
        "\n",
        "from sklearn.metrics import recall_score\n",
        "tpr = recall_score(y_test, y_pred) \n",
        "tnr = recall_score(y_test, y_pred, pos_label = 0) \n",
        "fpr = 1 - tnr\n",
        "fnr = 1 - tpr\n",
        "print(\"False Positive Rate:\",fpr)\n",
        "print(\"False Negative Rate:\",fnr)\n",
        "print(\"Confusion Matrix: \\n\", metrics.confusion_matrix(y_test, y_pred))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "101/101 [==============================] - 0s 1ms/step - loss: 0.6270 - accuracy: 0.6581\n",
            "Accuracy: 0.6581330299377441\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 9608, 11) for input KerasTensor(type_spec=TensorSpec(shape=(None, 9608, 11), dtype=tf.float32, name='bidirectional_input'), name='bidirectional_input', description=\"created by layer 'bidirectional_input'\"), but it was called on an input with incompatible shape (None, 1, 11).\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "AUC: 0.7044908150748652\n",
            "Accuracy: 0.6581330003122073\n",
            "Precision: 0.6572827417380661\n",
            "Recall: 0.6674953387197017\n",
            "F1 Score: 0.6623496762257169\n",
            "False Positive Rate: 0.3513174404015057\n",
            "False Negative Rate: 0.3325046612802983\n",
            "Confusion Matrix: \n",
            " [[1034  560]\n",
            " [ 535 1074]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4D75wL4W_Il2"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}