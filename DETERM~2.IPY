{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Determining N in KNN for Dataset 2.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 198
        },
        "id": "4KZEh5az5_XG",
        "outputId": "9c631198-554d-43f9-a061-afbdac5287b7"
      },
      "source": [
        "import pandas as pd\r\n",
        "import numpy as np\r\n",
        "from sklearn.model_selection import train_test_split\r\n",
        "from sklearn.preprocessing import PowerTransformer\r\n",
        "from sklearn.metrics import recall_score\r\n",
        "from sklearn.metrics import roc_curve\r\n",
        "from sklearn.metrics import roc_auc_score\r\n",
        "from sklearn.model_selection import cross_val_score\r\n",
        "from sklearn import metrics\r\n",
        "from matplotlib import pyplot\r\n",
        "import matplotlib.pyplot as plt; plt.rcdefaults()\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "import seaborn as sn\r\n",
        "\r\n",
        "\r\n",
        "df = pd.read_csv('/content/drive/MyDrive/EEG data/OneHotDataset.csv')\r\n",
        "df.head()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CSE_110</th>\n",
              "      <th>CSE_111</th>\n",
              "      <th>CSE_230</th>\n",
              "      <th>CSE_260</th>\n",
              "      <th>CSE_330</th>\n",
              "      <th>CSE_340</th>\n",
              "      <th>CSE_420</th>\n",
              "      <th>CSE_421</th>\n",
              "      <th>CSE_422</th>\n",
              "      <th>CSE_427</th>\n",
              "      <th>Attention</th>\n",
              "      <th>Mediation</th>\n",
              "      <th>Raw</th>\n",
              "      <th>Delta</th>\n",
              "      <th>Theta</th>\n",
              "      <th>Alpha1</th>\n",
              "      <th>Alpha2</th>\n",
              "      <th>Beta1</th>\n",
              "      <th>Beta2</th>\n",
              "      <th>Gamma1</th>\n",
              "      <th>Gamma2</th>\n",
              "      <th>user-definedlabeln</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>56</td>\n",
              "      <td>43</td>\n",
              "      <td>278</td>\n",
              "      <td>301963</td>\n",
              "      <td>90612</td>\n",
              "      <td>33735</td>\n",
              "      <td>23991</td>\n",
              "      <td>27946</td>\n",
              "      <td>45097</td>\n",
              "      <td>33228</td>\n",
              "      <td>8293</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>-50</td>\n",
              "      <td>73787</td>\n",
              "      <td>28083</td>\n",
              "      <td>1439</td>\n",
              "      <td>2240</td>\n",
              "      <td>2746</td>\n",
              "      <td>3687</td>\n",
              "      <td>5293</td>\n",
              "      <td>2740</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>47</td>\n",
              "      <td>48</td>\n",
              "      <td>101</td>\n",
              "      <td>758353</td>\n",
              "      <td>383745</td>\n",
              "      <td>201999</td>\n",
              "      <td>62107</td>\n",
              "      <td>36293</td>\n",
              "      <td>130536</td>\n",
              "      <td>57243</td>\n",
              "      <td>25354</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>47</td>\n",
              "      <td>57</td>\n",
              "      <td>-5</td>\n",
              "      <td>2012240</td>\n",
              "      <td>129350</td>\n",
              "      <td>61236</td>\n",
              "      <td>17084</td>\n",
              "      <td>11488</td>\n",
              "      <td>62462</td>\n",
              "      <td>49960</td>\n",
              "      <td>33932</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>44</td>\n",
              "      <td>53</td>\n",
              "      <td>-8</td>\n",
              "      <td>1005145</td>\n",
              "      <td>354328</td>\n",
              "      <td>37102</td>\n",
              "      <td>88881</td>\n",
              "      <td>45307</td>\n",
              "      <td>99603</td>\n",
              "      <td>44790</td>\n",
              "      <td>29749</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   CSE_110  CSE_111  CSE_230  ...  Gamma1  Gamma2  user-definedlabeln\n",
              "0        0        1        0  ...   33228    8293                   0\n",
              "1        0        1        0  ...    5293    2740                   0\n",
              "2        0        1        0  ...   57243   25354                   0\n",
              "3        0        1        0  ...   49960   33932                   0\n",
              "4        0        1        0  ...   44790   29749                   0\n",
              "\n",
              "[5 rows x 22 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O0Sh-icc6Mhm"
      },
      "source": [
        "X = df.drop('user-definedlabeln',axis=1).values\r\n",
        "y = df['user-definedlabeln'].values"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IQA5us5q6NTp"
      },
      "source": [
        "pt = PowerTransformer()\r\n",
        "X_pt = pt.fit_transform(X)\r\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_pt, y, test_size=0.25, random_state=42)"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HWGF5TsQ6OMd"
      },
      "source": [
        "list = []\r\n",
        "list2 = []\r\n",
        "\r\n",
        "for c in range (1,51):\r\n",
        "  list2.append(c)\r\n",
        "\r\n",
        "\r\n",
        "for i in range (1, 51):\r\n",
        "\r\n",
        "  from sklearn.neighbors import KNeighborsClassifier\r\n",
        "  knn = KNeighborsClassifier(n_neighbors=i)\r\n",
        "  knn.fit(X_train, y_train)\r\n",
        "  y_pred = knn.predict(X_test)\r\n",
        "\r\n",
        "  list.append(metrics.accuracy_score(y_test, y_pred))\r\n"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "xXKfbZeA6PEn",
        "outputId": "acc8c332-fe75-4c3c-d333-d9295aa18c12"
      },
      "source": [
        "import matplotlib.pyplot as plt\r\n",
        "import numpy as np\r\n",
        "\r\n",
        "x_1 = list2\r\n",
        "y_1 = list\r\n",
        "\r\n",
        "\r\n",
        "sn.lineplot(data=y_1) \r\n",
        "plt.xlabel('Value of K')\r\n",
        "plt.ylabel('Accuracy')\r\n",
        "\r\n",
        "def annot_max(x,y, ax=None):\r\n",
        "    xmax = x[np.argmax(y)]\r\n",
        "    ymax = max(list)\r\n",
        "    text= \"Value of K={:.0f}, Accuracy={:.3f}\".format(xmax, ymax)\r\n",
        "    if not ax:\r\n",
        "        ax=plt.gca()\r\n",
        "    bbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\r\n",
        "    arrowprops=dict(arrowstyle=\"->\",connectionstyle=\"angle,angleA=0,angleB=60\")\r\n",
        "    kw = dict(xycoords='data',textcoords=\"axes fraction\",\r\n",
        "              arrowprops=arrowprops, bbox=bbox_props, ha=\"right\", va=\"top\")\r\n",
        "    ax.annotate(text, xy=(xmax, ymax), xytext=(1.07,1.07), **kw)\r\n",
        "\r\n",
        "annot_max(x_1,y_1)\r\n",
        "\r\n",
        "\r\n",
        "#ax.set_ylim(-0.3,1.5)\r\n",
        "\r\n",
        "plt.show()"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 567
        },
        "id": "l-vs3rR76QC_",
        "outputId": "53b71ec3-ed3d-485d-e30c-77469c603aba"
      },
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\r\n",
        "knn = KNeighborsClassifier(n_neighbors=13)\r\n",
        "knn.fit(X_train, y_train)\r\n",
        "y_pred = knn.predict(X_test)\r\n",
        "print(\"KNN\")\r\n",
        "print(\"____________________________\")\r\n",
        "print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\r\n",
        "print(\"Precision:\",metrics.precision_score(y_test, y_pred))\r\n",
        "print(\"Recall:\",metrics.recall_score(y_test, y_pred))\r\n",
        "print(\"F1 Score:\",metrics.f1_score(y_test, y_pred))\r\n",
        "print(\"____________________________\")\r\n",
        "print(\"Confusion Matrix: \\n\", metrics.confusion_matrix(y_test, y_pred))\r\n",
        "\r\n",
        "tpr = recall_score(y_test, y_pred) \r\n",
        "tnr = recall_score(y_test, y_pred, pos_label = 0) \r\n",
        "fpr = 1 - tnr\r\n",
        "fnr = 1 - tpr\r\n",
        "print(\"____________________________\")\r\n",
        "print(\"False Positive Rate:\",fpr)\r\n",
        "print(\"False Negative Rate:\",fnr)\r\n",
        "\r\n",
        "y_pred_prob = knn.predict_proba(X_test)[:,1]\r\n",
        "\r\n",
        "# Compute and print AUC score\r\n",
        "print(\"____________________________\")\r\n",
        "print(\"AUC: {}\".format(roc_auc_score(y_test, y_pred_prob)))\r\n",
        "\r\n",
        "# Compute cross-validated AUC scores: cv_auc\r\n",
        "#cv_auc = cross_val_score(logreg, X, y, cv=5, scoring='roc_auc')\r\n",
        "\r\n",
        "# Print list of AUC scores\r\n",
        "#print(\"AUC scores computed using 5-fold cross-validation: {}\".format(cv_auc))\r\n",
        "\r\n",
        "# Generate ROC curve values: fpr, tpr, thresholds\r\n",
        "fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\r\n",
        "\r\n",
        "# Plot ROC curve\r\n",
        "pyplot.plot([0, 1], [0, 1], 'k--')\r\n",
        "pyplot.plot(fpr, tpr)\r\n",
        "pyplot.xlabel('False Positive Rate')\r\n",
        "pyplot.ylabel('True Positive Rate')\r\n",
        "pyplot.title('ROC Curve')\r\n",
        "pyplot.show()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "KNN\n",
            "____________________________\n",
            "Accuracy: 0.8051826412738058\n",
            "Precision: 0.7828834003446296\n",
            "Recall: 0.8471100062150404\n",
            "F1 Score: 0.8137313432835822\n",
            "____________________________\n",
            "Confusion Matrix: \n",
            " [[1216  378]\n",
            " [ 246 1363]]\n",
            "____________________________\n",
            "False Positive Rate: 0.23713927227101628\n",
            "False Negative Rate: 0.1528899937849596\n",
            "____________________________\n",
            "AUC: 0.8813362024933464\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}