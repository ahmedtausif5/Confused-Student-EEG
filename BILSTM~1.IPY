{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "BiLSTM for dataset 2.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ps_VWRcLQxJ7"
      },
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import LSTM\n",
        "from keras.layers import Bidirectional\n",
        "from sklearn.model_selection import train_test_split\n",
        "import numpy as np \n",
        "import pandas as pd\n",
        "from keras.callbacks import EarlyStopping\n",
        "from sklearn.preprocessing import PowerTransformer\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import roc_curve\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import roc_auc_score"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LEvpppFnHLWA"
      },
      "source": [
        "df = pd.read_csv('/content/sample_data/OneHotDataset.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "id": "HVu0wYscHMku",
        "outputId": "285597d6-246b-4135-ab33-492fcc8ae081"
      },
      "source": [
        "df.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CSE_110</th>\n",
              "      <th>CSE_111</th>\n",
              "      <th>CSE_230</th>\n",
              "      <th>CSE_260</th>\n",
              "      <th>CSE_330</th>\n",
              "      <th>CSE_340</th>\n",
              "      <th>CSE_420</th>\n",
              "      <th>CSE_421</th>\n",
              "      <th>CSE_422</th>\n",
              "      <th>CSE_427</th>\n",
              "      <th>Attention</th>\n",
              "      <th>Mediation</th>\n",
              "      <th>Raw</th>\n",
              "      <th>Delta</th>\n",
              "      <th>Theta</th>\n",
              "      <th>Alpha1</th>\n",
              "      <th>Alpha2</th>\n",
              "      <th>Beta1</th>\n",
              "      <th>Beta2</th>\n",
              "      <th>Gamma1</th>\n",
              "      <th>Gamma2</th>\n",
              "      <th>user-definedlabeln</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>12811.000000</td>\n",
              "      <td>12811.000000</td>\n",
              "      <td>12811.000000</td>\n",
              "      <td>12811.000000</td>\n",
              "      <td>12811.000000</td>\n",
              "      <td>12811.000000</td>\n",
              "      <td>12811.000000</td>\n",
              "      <td>12811.000000</td>\n",
              "      <td>12811.000000</td>\n",
              "      <td>12811.000000</td>\n",
              "      <td>12811.000000</td>\n",
              "      <td>12811.000000</td>\n",
              "      <td>12811.000000</td>\n",
              "      <td>1.281100e+04</td>\n",
              "      <td>1.281100e+04</td>\n",
              "      <td>1.281100e+04</td>\n",
              "      <td>1.281100e+04</td>\n",
              "      <td>1.281100e+04</td>\n",
              "      <td>1.281100e+04</td>\n",
              "      <td>1.281100e+04</td>\n",
              "      <td>1.281100e+04</td>\n",
              "      <td>12811.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.099992</td>\n",
              "      <td>0.110218</td>\n",
              "      <td>0.092186</td>\n",
              "      <td>0.091874</td>\n",
              "      <td>0.099446</td>\n",
              "      <td>0.094138</td>\n",
              "      <td>0.096011</td>\n",
              "      <td>0.105847</td>\n",
              "      <td>0.099914</td>\n",
              "      <td>0.110374</td>\n",
              "      <td>41.313871</td>\n",
              "      <td>47.182656</td>\n",
              "      <td>65.570760</td>\n",
              "      <td>6.057853e+05</td>\n",
              "      <td>1.680526e+05</td>\n",
              "      <td>4.138435e+04</td>\n",
              "      <td>3.318339e+04</td>\n",
              "      <td>2.431837e+04</td>\n",
              "      <td>3.814433e+04</td>\n",
              "      <td>2.959255e+04</td>\n",
              "      <td>1.441597e+04</td>\n",
              "      <td>0.512606</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.300001</td>\n",
              "      <td>0.313173</td>\n",
              "      <td>0.289300</td>\n",
              "      <td>0.288860</td>\n",
              "      <td>0.299271</td>\n",
              "      <td>0.292032</td>\n",
              "      <td>0.294618</td>\n",
              "      <td>0.307653</td>\n",
              "      <td>0.299897</td>\n",
              "      <td>0.313367</td>\n",
              "      <td>23.152953</td>\n",
              "      <td>22.655976</td>\n",
              "      <td>597.921035</td>\n",
              "      <td>6.376236e+05</td>\n",
              "      <td>2.441346e+05</td>\n",
              "      <td>7.243082e+04</td>\n",
              "      <td>5.831410e+04</td>\n",
              "      <td>3.837968e+04</td>\n",
              "      <td>7.906606e+04</td>\n",
              "      <td>7.982637e+04</td>\n",
              "      <td>3.603523e+04</td>\n",
              "      <td>0.499861</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-2048.000000</td>\n",
              "      <td>4.480000e+02</td>\n",
              "      <td>1.700000e+01</td>\n",
              "      <td>2.000000e+00</td>\n",
              "      <td>2.000000e+00</td>\n",
              "      <td>3.000000e+00</td>\n",
              "      <td>2.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>2.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>27.000000</td>\n",
              "      <td>37.000000</td>\n",
              "      <td>-14.000000</td>\n",
              "      <td>9.806400e+04</td>\n",
              "      <td>2.691750e+04</td>\n",
              "      <td>6.838000e+03</td>\n",
              "      <td>6.852000e+03</td>\n",
              "      <td>6.140000e+03</td>\n",
              "      <td>7.358500e+03</td>\n",
              "      <td>4.058000e+03</td>\n",
              "      <td>2.167500e+03</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>43.000000</td>\n",
              "      <td>51.000000</td>\n",
              "      <td>35.000000</td>\n",
              "      <td>3.954870e+05</td>\n",
              "      <td>8.133100e+04</td>\n",
              "      <td>1.750000e+04</td>\n",
              "      <td>1.495900e+04</td>\n",
              "      <td>1.281800e+04</td>\n",
              "      <td>1.581000e+04</td>\n",
              "      <td>9.763000e+03</td>\n",
              "      <td>5.116000e+03</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>57.000000</td>\n",
              "      <td>63.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>9.166230e+05</td>\n",
              "      <td>2.052760e+05</td>\n",
              "      <td>4.477950e+04</td>\n",
              "      <td>3.455050e+04</td>\n",
              "      <td>2.740600e+04</td>\n",
              "      <td>3.549400e+04</td>\n",
              "      <td>2.488800e+04</td>\n",
              "      <td>1.266950e+04</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>2047.000000</td>\n",
              "      <td>3.964663e+06</td>\n",
              "      <td>3.007802e+06</td>\n",
              "      <td>1.369955e+06</td>\n",
              "      <td>1.016913e+06</td>\n",
              "      <td>1.067778e+06</td>\n",
              "      <td>1.645369e+06</td>\n",
              "      <td>1.972506e+06</td>\n",
              "      <td>1.348117e+06</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            CSE_110       CSE_111  ...        Gamma2  user-definedlabeln\n",
              "count  12811.000000  12811.000000  ...  1.281100e+04        12811.000000\n",
              "mean       0.099992      0.110218  ...  1.441597e+04            0.512606\n",
              "std        0.300001      0.313173  ...  3.603523e+04            0.499861\n",
              "min        0.000000      0.000000  ...  2.000000e+00            0.000000\n",
              "25%        0.000000      0.000000  ...  2.167500e+03            0.000000\n",
              "50%        0.000000      0.000000  ...  5.116000e+03            1.000000\n",
              "75%        0.000000      0.000000  ...  1.266950e+04            1.000000\n",
              "max        1.000000      1.000000  ...  1.348117e+06            1.000000\n",
              "\n",
              "[8 rows x 22 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gPyYKTafQ7yD"
      },
      "source": [
        "X=df.drop('user-definedlabeln', axis=1).values\n",
        "y=df['user-definedlabeln'].values\n",
        "\n",
        "pt = PowerTransformer()\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n",
        "X_train = pt.fit_transform(X_train)\n",
        "X_test = pt.transform(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KQuGG3X_Q9T7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "25cabe76-9f9b-47c0-96a0-e5bbc81b7e48"
      },
      "source": [
        "X_train.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(9608, 21)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3XFA63_aQ-hN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5e7533bc-bb54-43ef-8239-ac9f2f5afa17"
      },
      "source": [
        "X_test.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3203, 21)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CtXDH6c5Q_mp"
      },
      "source": [
        "X_train = X_train.reshape(-1, 1, 21)\n",
        "X_test  = X_test.reshape(-1, 1, 21)\n",
        "y_train = y_train.reshape(-1, 1, 1)\n",
        "y_test = y_test.reshape(-1, 1, 1)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hf2D0e3URA3O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d2bfd26-79fb-4db7-a0be-45f753928446"
      },
      "source": [
        "model = Sequential()\n",
        "model.add(Bidirectional(LSTM(50, return_sequences=True, activation='tanh'), input_shape=(9608, 21)))\n",
        "model.add(Dense(1, activation='sigmoid'))\n",
        "model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics=['accuracy'])\n",
        "model.summary()\n",
        "early_stopping_monitor = EarlyStopping(patience=5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "bidirectional (Bidirectional (None, 9608, 100)         28800     \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 9608, 1)           101       \n",
            "=================================================================\n",
            "Total params: 28,901\n",
            "Trainable params: 28,901\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JgeRYQqNRDe_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4160fca1-db67-4703-a2e8-bcb9b0339f90"
      },
      "source": [
        "history = model.fit(X_train, y_train, epochs=100, verbose=True, validation_split=0.3, callbacks=[early_stopping_monitor], batch_size=20)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 9608, 21) for input KerasTensor(type_spec=TensorSpec(shape=(None, 9608, 21), dtype=tf.float32, name='bidirectional_input'), name='bidirectional_input', description=\"created by layer 'bidirectional_input'\"), but it was called on an input with incompatible shape (None, 1, 21).\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 9608, 21) for input KerasTensor(type_spec=TensorSpec(shape=(None, 9608, 21), dtype=tf.float32, name='bidirectional_input'), name='bidirectional_input', description=\"created by layer 'bidirectional_input'\"), but it was called on an input with incompatible shape (None, 1, 21).\n",
            "333/337 [============================>.] - ETA: 0s - loss: 0.6294 - accuracy: 0.6417WARNING:tensorflow:Model was constructed with shape (None, 9608, 21) for input KerasTensor(type_spec=TensorSpec(shape=(None, 9608, 21), dtype=tf.float32, name='bidirectional_input'), name='bidirectional_input', description=\"created by layer 'bidirectional_input'\"), but it was called on an input with incompatible shape (None, 1, 21).\n",
            "337/337 [==============================] - 5s 6ms/step - loss: 0.6290 - accuracy: 0.6422 - val_loss: 0.5673 - val_accuracy: 0.7170\n",
            "Epoch 2/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.5600 - accuracy: 0.7163 - val_loss: 0.5356 - val_accuracy: 0.7367\n",
            "Epoch 3/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.5242 - accuracy: 0.7447 - val_loss: 0.5119 - val_accuracy: 0.7430\n",
            "Epoch 4/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.4979 - accuracy: 0.7511 - val_loss: 0.4957 - val_accuracy: 0.7530\n",
            "Epoch 5/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.4824 - accuracy: 0.7566 - val_loss: 0.4831 - val_accuracy: 0.7575\n",
            "Epoch 6/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.4781 - accuracy: 0.7629 - val_loss: 0.4718 - val_accuracy: 0.7659\n",
            "Epoch 7/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.4722 - accuracy: 0.7620 - val_loss: 0.4580 - val_accuracy: 0.7766\n",
            "Epoch 8/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.4467 - accuracy: 0.7842 - val_loss: 0.4552 - val_accuracy: 0.7777\n",
            "Epoch 9/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.4407 - accuracy: 0.7913 - val_loss: 0.4474 - val_accuracy: 0.7787\n",
            "Epoch 10/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.4347 - accuracy: 0.7917 - val_loss: 0.4427 - val_accuracy: 0.7811\n",
            "Epoch 11/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.4167 - accuracy: 0.8047 - val_loss: 0.4316 - val_accuracy: 0.7978\n",
            "Epoch 12/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.4234 - accuracy: 0.7951 - val_loss: 0.4328 - val_accuracy: 0.7901\n",
            "Epoch 13/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.4142 - accuracy: 0.7987 - val_loss: 0.4245 - val_accuracy: 0.7960\n",
            "Epoch 14/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3986 - accuracy: 0.8097 - val_loss: 0.4237 - val_accuracy: 0.7988\n",
            "Epoch 15/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3950 - accuracy: 0.8170 - val_loss: 0.4191 - val_accuracy: 0.8016\n",
            "Epoch 16/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3780 - accuracy: 0.8252 - val_loss: 0.4176 - val_accuracy: 0.8037\n",
            "Epoch 17/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3788 - accuracy: 0.8264 - val_loss: 0.4140 - val_accuracy: 0.8054\n",
            "Epoch 18/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3918 - accuracy: 0.8191 - val_loss: 0.4104 - val_accuracy: 0.8134\n",
            "Epoch 19/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3774 - accuracy: 0.8263 - val_loss: 0.4109 - val_accuracy: 0.8061\n",
            "Epoch 20/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3775 - accuracy: 0.8275 - val_loss: 0.4135 - val_accuracy: 0.8058\n",
            "Epoch 21/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3617 - accuracy: 0.8321 - val_loss: 0.4092 - val_accuracy: 0.8117\n",
            "Epoch 22/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3616 - accuracy: 0.8300 - val_loss: 0.4043 - val_accuracy: 0.8123\n",
            "Epoch 23/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3584 - accuracy: 0.8317 - val_loss: 0.4074 - val_accuracy: 0.8071\n",
            "Epoch 24/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3575 - accuracy: 0.8356 - val_loss: 0.4010 - val_accuracy: 0.8106\n",
            "Epoch 25/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3510 - accuracy: 0.8426 - val_loss: 0.4037 - val_accuracy: 0.8096\n",
            "Epoch 26/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3469 - accuracy: 0.8447 - val_loss: 0.4022 - val_accuracy: 0.8096\n",
            "Epoch 27/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3485 - accuracy: 0.8329 - val_loss: 0.4085 - val_accuracy: 0.8113\n",
            "Epoch 28/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3352 - accuracy: 0.8531 - val_loss: 0.4037 - val_accuracy: 0.8061\n",
            "Epoch 29/100\n",
            "337/337 [==============================] - 1s 3ms/step - loss: 0.3448 - accuracy: 0.8436 - val_loss: 0.4015 - val_accuracy: 0.8117\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_Cbq36r2RH1p",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 536
        },
        "outputId": "334c8df8-168f-4292-e200-3a3d1032afd0"
      },
      "source": [
        "# accuracy = model.evaluate(X_test, y_test)[1]\n",
        "# print('Accuracy:', accuracy)\n",
        "# y_pred = model.predict(X_test)\n",
        "# print(y_pred)\n",
        "\n",
        "accuracy = model.evaluate(X_test, y_test)[1]\n",
        "print('Accuracy:', accuracy)\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "y_pred = y_pred.flatten()\n",
        "y_test = y_test.flatten()\n",
        "\n",
        "fpr, tpr, thresholds = roc_curve(y_test, y_pred)\n",
        "\n",
        "# Plot ROC curve\n",
        "plt.plot([0, 1], [0, 1], 'k--')\n",
        "plt.plot(fpr, tpr)\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('ROC Curve')\n",
        "plt.show()\n",
        "\n",
        "print(\"AUC: {}\".format(roc_auc_score(y_test, y_pred)))\n",
        "\n",
        "y_pred = y_pred.round()\n",
        "print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n",
        "print(\"Precision:\",metrics.precision_score(y_test, y_pred))\n",
        "print(\"Recall:\",metrics.recall_score(y_test, y_pred))\n",
        "print(\"F1 Score:\",metrics.f1_score(y_test, y_pred))\n",
        "\n",
        "from sklearn.metrics import recall_score\n",
        "tpr = recall_score(y_test, y_pred) \n",
        "tnr = recall_score(y_test, y_pred, pos_label = 0) \n",
        "fpr = 1 - tnr\n",
        "fnr = 1 - tpr\n",
        "print(\"False Positive Rate:\",fpr)\n",
        "print(\"False Negative Rate:\",fnr)\n",
        "print(\"Confusion Matrix: \\n\", metrics.confusion_matrix(y_test, y_pred))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "101/101 [==============================] - 0s 1ms/step - loss: 0.4083 - accuracy: 0.8089\n",
            "Accuracy: 0.8089291453361511\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 9608, 21) for input KerasTensor(type_spec=TensorSpec(shape=(None, 9608, 21), dtype=tf.float32, name='bidirectional_input'), name='bidirectional_input', description=\"created by layer 'bidirectional_input'\"), but it was called on an input with incompatible shape (None, 1, 21).\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "AUC: 0.893032877329763\n",
            "Accuracy: 0.8089291289416173\n",
            "Precision: 0.7893209518282066\n",
            "Recall: 0.8452454940957116\n",
            "F1 Score: 0.8163265306122448\n",
            "False Positive Rate: 0.2277289836888331\n",
            "False Negative Rate: 0.1547545059042884\n",
            "Confusion Matrix: \n",
            " [[1231  363]\n",
            " [ 249 1360]]\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}